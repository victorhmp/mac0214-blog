<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[MAC0214 Blog]]></title><description><![CDATA[A simple blog with updates on my activities being conducted as part of the discipline MAC0214]]></description><link>https://victorhmp.github.io/mac0214-blog/</link><generator>RSS for Node</generator><lastBuildDate>Sat, 01 Dec 2018 02:07:36 GMT</lastBuildDate><item><title><![CDATA[HackathonUSP 2018.2 (Site)]]></title><description><![CDATA[Antes de criar a nova página no site do HackathonUSP para a edição 2018.2, iniciei no dia 22 de setembro a refatoração do código-fonte…]]></description><link>https://victorhmp.github.io/mac0214-blog//HackathonUSP/</link><guid isPermaLink="false">https://victorhmp.github.io/mac0214-blog//HackathonUSP/</guid><pubDate>Fri, 30 Nov 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Antes de criar a nova página no site do HackathonUSP para a edição 2018.2, iniciei no dia 22 de setembro a refatoração do código-fonte dos componentes que compõem o site, após reunião com meu orientador sobre qual seria a melhor abordagem de refatoração, onde decidimos que o melhor caminho era fazer com que os componentes recebessem de arquivos externos as informações que deveriam ser renderizadas nos respectivos componentes. O repositório Git com o código-fonte do site pode ser encontrado em &lt;a href=&quot;https://gitlab.com/&quot;&gt;https://gitlab.com/&lt;/a&gt; uspcodelab/sites/hackathonusp&lt;/p&gt;
&lt;p&gt;O site do HackathonUSP possui os componentes: About.vue, Countdown.vue, Judges.vue, JudgingCriteria.vue, Navbar.vue, Prizes.vue, Promoters.vue, TheFooter.vue e TheHeader.vue. Esses componentes são então rende- rizados para construir uma página.&lt;/p&gt;
&lt;p&gt;Comecei o trabalho refatorando o componente “TheHeader”, onde fiz que o componente esperasse receber um objeto através de props com informações que deveriam ser renderizadas no cabeçalho da página, como: nome do evento, data, local, tema e até um logo. Além dessas informações também fiz com que o componente seja dinâmico de tal forma que, recebe uma data em que as inscrições do evento se abrem e uma data na qual elas se fecham, e baseado nessas datas renderiza ou não os links para o formulário de inscrições e o regulamento do evento.&lt;/p&gt;
&lt;p&gt;Ao avançar para a generalização dos demais componentes, feita de forma similar à do cabeçalho, o principal problema que precisava resolver era como definir a paleta de cores de cada página de maneira dinâmica, que permitisse que cores fossem passadas por props aos componentes, assim até mesmo as cores dos itens renderizados poderiam ser modificadas. Esse talvez tenha sido o problema mais desafiador desta refatoração, pois consegui chegar em várias alternativas, mas todas tinham seus respectivos trade-offs. Por fim, decidi que a melhor opção seria fazer com que o componente esperasse receber um objeto em que a paleta de cores a ser usada seria passada pelo programador e seria interpretada utilizando styles aplicados in-line com auxílio do diretório v-bind, disponível na API do Vue.js. Talvez não tenha sido a solução mais elegante em termos do código-fonte, mas com certeza era a mais prática e natural para o programador criando uma nova página.&lt;/p&gt;
&lt;p&gt;Outros componentes que necessitaram de mudanças e escolhas mais específicas foram os de “Promoters”e “Judges”, pois esses componentes iriam renderizar um número variável de componentes filho, o que gerou problemas com a definição de estilo da página com CSS. Novamente dei preferência à solução mais prática e intuitiva do ponto de vista do criador de uma nova página, e fiz com o CSS desses componentes padronizasse a distribuição de espaço independentemente do número de componentes filho a serem renderizados.&lt;/p&gt;
&lt;p&gt;Para essa etapa do trabalho que precisava ser completa rapidamente devido à necessidade de divulgação da edição 2018.2 do evento, trabalhei todos os dias durante o período de 22 de setembro até 30 de setembro, até q a refatoração estava completa, tornando a criação da nova página possível e bem rápida de ser feita. Essa etapa de refatoração teve um total de 30 horas de trabalho.&lt;/p&gt;
&lt;p&gt;Após a refatoração, criar a página da nova edição ficou muito mais fácil, a maior parte do tempo de trabalho foi para escrever os textos que deveriam ser renderizados, encontrar imagens e convertê-las para o formato svg e acertar a paleta de cores para a nova edição do evento baseado no novo logo. Para a criação da primeira versão da página que foi ao ar no dia 02 de outubro, foram necessárias apenas 03 horas de trabalho.&lt;/p&gt;
&lt;p&gt;Uma vez criada a página, eventualmente era necessária a adição de algum novo patrocinador, ou alguma nova função, como uma nova instância do “Countdown”para ser renderizada enquanto o evento estava acontecendo para marcar o tempo que os participantes teriam para submeter seus projetos. Essas pequenas alterações foram feitas ao longo do mês de outubro até a data do evento no dia 10 de novembro, totalizando 2 horas de trabalho.&lt;/p&gt;
&lt;p&gt;A distribuição final das horas de trabalho no site do HackathonUSP foi a seguinte:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Refatoração&lt;/th&gt;
&lt;th&gt;30 horas&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Criação da nova página&lt;/td&gt;
&lt;td&gt;03 horas&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Manutenção&lt;/td&gt;
&lt;td&gt;02 horas&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content:encoded></item><item><title><![CDATA[MOOC de introdução ao desenvolvimento Web]]></title><description><![CDATA[Durante o mês de agosto, mais especificamente nos dias 02, 07, 14 e 29 de agosto, participei de reuniões com outros 3 membros do…]]></description><link>https://victorhmp.github.io/mac0214-blog//MOOC/</link><guid isPermaLink="false">https://victorhmp.github.io/mac0214-blog//MOOC/</guid><pubDate>Fri, 30 Nov 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Durante o mês de agosto, mais especificamente nos dias 02, 07, 14 e 29 de agosto, participei de reuniões com outros 3 membros do USPCodeLab com o objetivo de decidir alguns detalhes gerais do curso, como: qual editor iríamos recomendar para os alunos poderem acompanhar mais facilmente; quando seriam propostos e quantos seriam os mini-projetos que o aluno deveria trabalhar durante o curso; qual a melhor abordagem para o projeto final do curso, principalmente entre um projeto grande que seria proposto ao final do curso e envolveria todo o conteúdo visto ou um projeto que fosse construído ao longo do curso; quando introduzir o controle de versão (Git) e como poderíamos mostrar sua necessidade para um público que nunca teve a experiência de um projeto de código colaborativo, etc. Dessas reuniões, as três primeiras foram presenciais, durante encontros do grupo de estudos avançados dev.boost() e com duração de 3 horas cada uma. A última reunião que fizemos para discutir estes tópicos foi feita remotamente no dia 29 de agosto e durou 2 horas.&lt;/p&gt;
&lt;p&gt;Durante o mês de setembro, busquei encontrar um horário fixo para facilitar a organização de tempo a ser dedicado para o MOOC, sendo definido às terças-feiras entre às 16h e às 20h. No dia 18 de setembro, comecei o trabalho nos roteiros das sessão sobre HTML do curso, escrevendo um primeiro rascunho para a aula “2.2 - Fazendo marcações”, com conteúdo sobre as tags mais utilizadas no HTML. No dia 25 de setembro comecei a escrever o roteiro para a aula “3.3 - Box Model”, da sessão sobre CSS do curso, que foi concluído no dia 02 de outubro.&lt;/p&gt;
&lt;p&gt;Já durante o mês de outubro, nos dias 09 e 16, trabalhei em desenvolver um mini-projeto que seria proposto ao aluno na sessão “JavaScript Parte 1”. Esse mini-projeto foi feito utilizando apenas JavaScript e simula uma API que poderia ser utilizada em uma aplicação de lista de tarefas. Foi tomado o cuidado de utilizar tudo o que seria coberto durante as aulas dessa sessão, pois assim o aluno poderá aplicar tudo o que foi visto.&lt;/p&gt;
&lt;p&gt;Infelizmente não conseguimos concluir o curso durante apenas este semestre devido ao surgimento de atividades mais urgentes para todos os membros do grupo que estavam responsáveis pela produção da nossa trilha de cursos. O trabalho será continuado nos próximos semestres pelo USPCodeLab.&lt;/p&gt;
&lt;p&gt;A distribuição das horas empregadas em cada etapa do trabalho foi a seguinte:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Planejamento e reuniões&lt;/th&gt;
&lt;th&gt;11 horas&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Idealização e escrita do roteiro&lt;/td&gt;
&lt;td&gt;12 horas&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Projeto para a sessão JavaScript Pt. I&lt;/td&gt;
&lt;td&gt;8 horas&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content:encoded></item><item><title><![CDATA[Plataforma Brains]]></title><description><![CDATA[Meu trabalho na plataforma Brains começou na última semana de julho, refazendo a API da plataforma, feita no semestre passado com Ruby on…]]></description><link>https://victorhmp.github.io/mac0214-blog//Brains/</link><guid isPermaLink="false">https://victorhmp.github.io/mac0214-blog//Brains/</guid><pubDate>Fri, 30 Nov 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Meu trabalho na plataforma Brains começou na última semana de julho, refazendo a API da plataforma, feita no semestre passado com Ruby on Rails. O estado em que a API estava dificultava mudanças, devido à rígida estrutura imposta pelo framework utilizado e a o fato de a equipe que a desenvolveu era inexperiente, o que causou inconsistências no código-fonte. Enfim, para a evolução da plataforma, uma refatoração completa era necessária, e com a ajuda de outro membro do USPCodeLab, Leonardo Lana, nos baseamos na funcionalidade e nas especificações do banco de dados que estavam presentes para poder criar uma nova API para substituir a então atual. Escolhemos Node.js e Koa como base para o projeto, o que nos permitiria implementar toda a estrutura do back-end com JavaScript, e como em todos os projetos do USPCodeLab, utilizamos Docker para conteinerização. Além disso, decidimos utilizar uma nova especificação de APIs chamada GraphQL, principalmente pelo desafio técnico e para experiência com o novo padrão.&lt;/p&gt;
&lt;p&gt;Durante a última semana de julho e as duas primeiras semanas de agosto, trabalhei exclusivamente na nova API configurando o Prisma, um ORM (Object-relational mapping) para facilitar a interface entre a nova API e o banco de dados PostgreSQL, escrevendo o GraphQL schema, onde especificamos todas as queries e mutations que a API poderá responder e escrevendo seus respectivos resolvers, funções à serem executadas quando as requisições que chegam ao servidor. A API já estava totalmente funcional após essas semanas de trabalho, possibilitando que o desenvolvimento da plataforma avançasse. O tempo de trabalho durante essas semanas foi de 10 horas.
No mês de setembro, eu e os demais integrantes do time decidimos nos dedicar ao desenvolvimento da plata- forma durante os encontros do dev.boost(), assim poderíamos trabalhar em time de maneira mais organizada, seguindo as prática de métodos ágeis. Durante nosso primeiro e segundo encontros para trabalhar no Brains nos dias 21 e 28 de setembro, trabalhei com o time na organização do nosso kanban, e na implementação da funcionalidade de envio de e-mails pela API. No encontro do dia 21 de setembro, trabalhei durante 4 horas na plataforma, enquanto no dia 28 de setembro trabalhei durante 6 horas.&lt;/p&gt;
&lt;p&gt;Após a criação da nova API e da implementação do envio de e-mails, o desenvolvimento do back-end da plataforma se mostrou totalmente funcional, e meu trabalho nos próximos encontros do dev.boost() foram de reparo de eventuais bugs e algumas mudanças incrementais. Essa etapa de trabalho totalizou 15 horas e foi se alternando com o trabalho no novo cliente Web da plataforma.&lt;/p&gt;
&lt;p&gt;À partir do dia 05 de outubro, trabalhei na criação do novo cliente da plataforma, originalmente feito utilizando React, e agora migrado para Vue.js. Trabalhei principalmente na página de exibição de um dashboard que mostra o estado atual de um projeto. Nessa página, é possível encontrar todas as informações do seu respectivo projeto, como os membros que compõem a equipe, o nome do projeto, as mensagens que podem ser deixadas por professores, diretores e alunos, e principalmente o objetivo do projeto, a sua justificativa e motivação, entre outros. Esse trabalho foi feito durante os encontros do dev.boost() nos dias 05, 19 e 26 de outubro, totalizando 9 horas de trabalho, sendo distribuída igualmente em 3 horas por encontro do dev.boost().&lt;/p&gt;
&lt;p&gt;Por fim, no mês de novembro trabalhei na criação de páginas para mostrar os professores associados à uma dada escola e os usuários com permissões de Master na plataforma, duas páginas simples que faziam requisições à API e mostravam os dados recebidos de forma estruturada em componentes reutilizáveis. Este trabalho totalizou mais 1 hora de desenvolvimento.&lt;/p&gt;
&lt;p&gt;A distribuição final das horas de trabalho na plataforma Brains foi a seguinte:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nova API&lt;/th&gt;
&lt;th&gt;25 horas&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Novo cliente&lt;/td&gt;
&lt;td&gt;10 horas&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content:encoded></item></channel></rss>